CREATE TABLE IF NOT EXISTS IDN_WEBHOOKS (
    ID INTEGER AUTO_INCREMENT,
    UUID VARCHAR(2048) NOT NULL UNIQUE,
    ENDPOINT VARCHAR(2048) NOT NULL,
    DESCRIPTION VARCHAR(1024),
    SECRET VARCHAR(1024) NOT NULL,
    VERSION VARCHAR(32) NOT NULL,
    EVENT_SCHEMA_NAME VARCHAR(64) NOT NULL,
    EVENT_SCHEMA_URI VARCHAR(255) NOT NULL,
    EVENT_SCHEMA_VERSION VARCHAR(32) NOT NULL,
    STATUS VARCHAR(16) NOT NULL,
    TENANT_ID INTEGER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (ID),
    UNIQUE (UUID),
    UNIQUE (TENANT_ID, ENDPOINT)
    );

CREATE TABLE IF NOT EXISTS IDN_WEBHOOK_EVENTS (
    WEBHOOK_ID INTEGER NOT NULL,
    EVENT_NAME VARCHAR(255) NOT NULL,
    PRIMARY KEY (WEBHOOK_ID, EVENT_NAME),
    CONSTRAINT FK_IDN_WEBHOOK_EVENTS_WEBHOOKS FOREIGN KEY (WEBHOOK_ID)
    REFERENCES IDN_WEBHOOKS(ID)
    ON DELETE CASCADE
    );

CREATE INDEX IDX_IDN_WEBHOOKS_TENANT ON IDN_WEBHOOKS(TENANT_ID);
CREATE INDEX IDX_IDN_WEBHOOKS_UUID ON IDN_WEBHOOKS(UUID);

-- Trigger for updating the UPDATED_AT column
DROP TRIGGER IF EXISTS TRG_IDN_WEBHOOKS_UPDATED_AT;

CREATE TRIGGER TRG_IDN_WEBHOOKS_UPDATED_AT
    BEFORE UPDATE ON IDN_WEBHOOKS
    FOR EACH ROW
BEGIN
    SET NEW.UPDATED_AT = CURRENT_TIMESTAMP;
END;